basePath: /v1
definitions:
  http.RegisterRequest:
    properties:
      email:
        example: test@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  http.authResponse:
    properties:
      token:
        example: v2.local.Gdh5kiOTyyaQ3_bNykYDeYHO21Jg2...
        type: string
    type: object
  http.errorResponse:
    properties:
      messages:
        example:
        - Error message 1
        - ' Error message 2'
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
    type: object
  http.loginRequest:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  http.userResponse:
    properties:
      email:
        example: test@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      username:
        example: vicalar
        type: string
    type: object
info:
  contact:
    name: Victor Alarcon
    url: https://github.com/VicAlarDev/kvault-back
  description: This is a simple RESTful
  license:
    name: MIT
  title: Go POS (Point of Sale) API
  version: "1.0"
paths:
  /users:
    post:
      consumes:
      - application/json
      description: create a new user account
      parameters:
      - description: Register request
        in: body
        name: RegisterRequest
        required: true
        schema:
          $ref: '#/definitions/http.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            $ref: '#/definitions/http.userResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "409":
          description: Data conflict error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      summary: Register a new user
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Logs in a registered user and returns an access token if the credentials
        are valid.
      parameters:
      - description: Login request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Succesfully logged in
          schema:
            $ref: '#/definitions/http.authResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      summary: Login and get an access token
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the access token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
